import { Component, Input, ViewChild } from '@angular/core';
import { IonSearchbar, ModalController } from '@ionic/angular';
import * as i0 from "@angular/core";
import * as i1 from "@ionic/angular";
import * as i2 from "@angular/common";
export class IonIntTelCodeComponent {
    constructor(modalCtrl) {
        this.modalCtrl = modalCtrl;
        this.closeButtonText = 'Close';
        this.closeButtonSlot = 'end';
    }
    ngOnInit() {
        this.allCountries = this.countries;
    }
    ionViewDidEnter() {
        if (this.sbar && this.shouldFocusSearchbar) {
            setTimeout(() => { this.sbar.setFocus(); }, 400);
        }
    }
    search(ev) {
        let search = ev.detail.value;
        this.notFound = false;
        if (search === '' || search === null) {
            this.countries = this.allCountries;
        }
        else {
            search = search.toLocaleLowerCase();
            this.countries = this.allCountries.filter(r => {
                return (r.name && r.name.toLocaleLowerCase().indexOf(search) !== -1);
            });
            if (this.countries.length === 0) {
                this.notFound = true;
            }
        }
    }
    itemTapped(c) {
        this.modalCtrl.dismiss(c);
    }
    closeModal() {
        this.modalCtrl.dismiss(null);
    }
}
/** @nocollapse */ IonIntTelCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: IonIntTelCodeComponent, deps: [{ token: i1.ModalController }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ IonIntTelCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: IonIntTelCodeComponent, selector: "ion-intl-tel-code", inputs: { country: "country", canSearch: "canSearch", closeButtonText: "closeButtonText", closeButtonSlot: "closeButtonSlot", countries: "countries", searchFailText: "searchFailText", searchPlaceholder: "searchPlaceholder", shouldFocusSearchbar: "shouldFocusSearchbar", title: "title", dialCode: "dialCode" }, viewQueries: [{ propertyName: "sbar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0, template: "<ion-header>\n  <ion-toolbar>\n    <ion-title class=\"ion-text-center\">\n      {{title}}\n    </ion-title>\n\n    <ion-buttons [slot]=\"closeButtonSlot\">\n      <ion-button ion-button (click)=\"closeModal()\">{{closeButtonText}}</ion-button>\n    </ion-buttons>\n\n  </ion-toolbar>\n  <ion-searchbar #searchBar *ngIf=\"canSearch\" placeholder=\"{{searchPlaceholder}}\" [debounce]=\"400\"\n                 (keyup.enter)=\"$event.target.blur()\" (ionChange)=\"search($event)\"></ion-searchbar>\n</ion-header>\n\n<ion-content>\n  <ion-list>\n    <ion-radio-group [value]=\"country.isoCode\">\n      <ion-item style=\"white-space:normal\" *ngFor=\"let c of countries\">\n        <ion-radio [value]=\"c.isoCode\" slot=\"start\" color=\"primary\" (click)=\"itemTapped(c)\">\n          {{c.name}} <span *ngIf=\"dialCode\">{{dialCode}}{{c.displayDialCode}}</span>\n        </ion-radio>\n        <span slot=\"end\" class=\"fi fi-{{c.flagClass}}\"></span>\n      </ion-item>\n    </ion-radio-group>\n    <ion-item lines=\"none\" *ngIf=\"notFound\">\n      <ion-text>{{searchFailText}}</ion-text>\n    </ion-item>\n  </ion-list>\n</ion-content>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.IonButton, selector: "ion-button", inputs: ["buttonType", "color", "disabled", "download", "expand", "fill", "form", "href", "mode", "rel", "routerAnimation", "routerDirection", "shape", "size", "strong", "target", "type"] }, { kind: "component", type: i1.IonButtons, selector: "ion-buttons", inputs: ["collapse"] }, { kind: "component", type: i1.IonContent, selector: "ion-content", inputs: ["color", "forceOverscroll", "fullscreen", "scrollEvents", "scrollX", "scrollY"] }, { kind: "component", type: i1.IonHeader, selector: "ion-header", inputs: ["collapse", "mode", "translucent"] }, { kind: "component", type: i1.IonItem, selector: "ion-item", inputs: ["button", "color", "counter", "counterFormatter", "detail", "detailIcon", "disabled", "download", "fill", "href", "lines", "mode", "rel", "routerAnimation", "routerDirection", "shape", "target", "type"] }, { kind: "component", type: i1.IonList, selector: "ion-list", inputs: ["inset", "lines", "mode"] }, { kind: "component", type: i1.IonRadio, selector: "ion-radio", inputs: ["color", "disabled", "justify", "labelPlacement", "legacy", "mode", "name", "value"] }, { kind: "component", type: i1.IonRadioGroup, selector: "ion-radio-group", inputs: ["allowEmptySelection", "name", "value"] }, { kind: "component", type: i1.IonSearchbar, selector: "ion-searchbar", inputs: ["animated", "autocomplete", "autocorrect", "cancelButtonIcon", "cancelButtonText", "clearIcon", "color", "debounce", "disabled", "enterkeyhint", "inputmode", "mode", "placeholder", "searchIcon", "showCancelButton", "showClearButton", "spellcheck", "type", "value"] }, { kind: "component", type: i1.IonText, selector: "ion-text", inputs: ["color", "mode"] }, { kind: "component", type: i1.IonTitle, selector: "ion-title", inputs: ["color", "size"] }, { kind: "component", type: i1.IonToolbar, selector: "ion-toolbar", inputs: ["color", "mode"] }, { kind: "directive", type: i1.RadioValueAccessor, selector: "ion-radio" }, { kind: "directive", type: i1.SelectValueAccessor, selector: "ion-range, ion-select, ion-radio-group, ion-segment, ion-datetime" }, { kind: "directive", type: i1.TextValueAccessor, selector: "ion-input:not([type=number]),ion-textarea,ion-searchbar" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: IonIntTelCodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ion-intl-tel-code', template: "<ion-header>\n  <ion-toolbar>\n    <ion-title class=\"ion-text-center\">\n      {{title}}\n    </ion-title>\n\n    <ion-buttons [slot]=\"closeButtonSlot\">\n      <ion-button ion-button (click)=\"closeModal()\">{{closeButtonText}}</ion-button>\n    </ion-buttons>\n\n  </ion-toolbar>\n  <ion-searchbar #searchBar *ngIf=\"canSearch\" placeholder=\"{{searchPlaceholder}}\" [debounce]=\"400\"\n                 (keyup.enter)=\"$event.target.blur()\" (ionChange)=\"search($event)\"></ion-searchbar>\n</ion-header>\n\n<ion-content>\n  <ion-list>\n    <ion-radio-group [value]=\"country.isoCode\">\n      <ion-item style=\"white-space:normal\" *ngFor=\"let c of countries\">\n        <ion-radio [value]=\"c.isoCode\" slot=\"start\" color=\"primary\" (click)=\"itemTapped(c)\">\n          {{c.name}} <span *ngIf=\"dialCode\">{{dialCode}}{{c.displayDialCode}}</span>\n        </ion-radio>\n        <span slot=\"end\" class=\"fi fi-{{c.flagClass}}\"></span>\n      </ion-item>\n    </ion-radio-group>\n    <ion-item lines=\"none\" *ngIf=\"notFound\">\n      <ion-text>{{searchFailText}}</ion-text>\n    </ion-item>\n  </ion-list>\n</ion-content>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ModalController }]; }, propDecorators: { country: [{
                type: Input
            }], canSearch: [{
                type: Input
            }], closeButtonText: [{
                type: Input
            }], closeButtonSlot: [{
                type: Input
            }], countries: [{
                type: Input
            }], searchFailText: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], shouldFocusSearchbar: [{
                type: Input
            }], title: [{
                type: Input
            }], dialCode: [{
                type: Input
            }], sbar: [{
                type: ViewChild,
                args: ['searchBar']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uLWludGwtdGVsLWNvZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW9uLWludGwtdGVsLWlucHV0L3NyYy9saWIvaW9uLWludGwtdGVsLWlucHV0L2lvbi1pbnRsLXRlbC1jb2RlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lvbi1pbnRsLXRlbC1pbnB1dC9zcmMvbGliL2lvbi1pbnRsLXRlbC1pbnB1dC9pb24taW50bC10ZWwtY29kZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQVMvRCxNQUFNLE9BQU8sc0JBQXNCO0lBbUJqQyxZQUNZLFNBQTBCO1FBQTFCLGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBaEI3QixvQkFBZSxHQUFHLE9BQU8sQ0FBQztRQUMxQixvQkFBZSxHQUFHLEtBQUssQ0FBQztJQWtCakMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDckMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzFDLFVBQVUsQ0FBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFFO1FBQ1AsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxNQUFNLEtBQUssRUFBRSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQ3BDO2FBQU07WUFDTCxNQUFNLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsRUFBRTtnQkFDN0MsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2FBQ3RCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLENBQUM7UUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7O3NJQXpEVSxzQkFBc0I7MEhBQXRCLHNCQUFzQixrZENWbkMsb25DQThCQTsyRkRwQmEsc0JBQXNCO2tCQU5sQyxTQUFTOytCQUVFLG1CQUFtQjtzR0FNcEIsT0FBTztzQkFBZixLQUFLO2dCQUNHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ0csZUFBZTtzQkFBdkIsS0FBSztnQkFDRyxlQUFlO3NCQUF2QixLQUFLO2dCQUNHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ0csY0FBYztzQkFBdEIsS0FBSztnQkFDRyxpQkFBaUI7c0JBQXpCLEtBQUs7Z0JBQ0csb0JBQW9CO3NCQUE1QixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUVrQixJQUFJO3NCQUEzQixTQUFTO3VCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW9uU2VhcmNoYmFyLCBNb2RhbENvbnRyb2xsZXIgfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5pbXBvcnQgeyBDb3VudHJ5SSB9IGZyb20gJy4uL21vZGVscy9jb3VudHJ5Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdpb24taW50bC10ZWwtY29kZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pb24taW50bC10ZWwtY29kZS5jb21wb25lbnQuaHRtbCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBJb25JbnRUZWxDb2RlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBjb3VudHJ5OiBDb3VudHJ5STtcbiAgQElucHV0KCkgY2FuU2VhcmNoOiBib29sZWFuO1xuICBASW5wdXQoKSBjbG9zZUJ1dHRvblRleHQgPSAnQ2xvc2UnO1xuICBASW5wdXQoKSBjbG9zZUJ1dHRvblNsb3QgPSAnZW5kJztcbiAgQElucHV0KCkgY291bnRyaWVzOiBDb3VudHJ5SVtdO1xuICBASW5wdXQoKSBzZWFyY2hGYWlsVGV4dDogc3RyaW5nO1xuICBASW5wdXQoKSBzZWFyY2hQbGFjZWhvbGRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBzaG91bGRGb2N1c1NlYXJjaGJhcjogYm9vbGVhbjtcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgZGlhbENvZGU6IHN0cmluZztcblxuICBAVmlld0NoaWxkKCdzZWFyY2hCYXInKSBzYmFyOiBJb25TZWFyY2hiYXI7XG5cbiAgcHJpdmF0ZSBhbGxDb3VudHJpZXM6IENvdW50cnlJW107XG5cbiAgcHVibGljIG5vdEZvdW5kO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSBtb2RhbEN0cmw6IE1vZGFsQ29udHJvbGxlclxuICApIHtcblxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hbGxDb3VudHJpZXMgPSB0aGlzLmNvdW50cmllcztcbiAgfVxuXG4gIGlvblZpZXdEaWRFbnRlcigpIHtcbiAgICBpZiAodGhpcy5zYmFyICYmIHRoaXMuc2hvdWxkRm9jdXNTZWFyY2hiYXIpIHtcbiAgICAgIHNldFRpbWVvdXQoICgpID0+IHsgdGhpcy5zYmFyLnNldEZvY3VzKCk7IH0sIDQwMCk7XG4gICAgfVxuICB9XG5cbiAgc2VhcmNoKGV2KSB7XG4gICAgbGV0IHNlYXJjaCA9IGV2LmRldGFpbC52YWx1ZTtcbiAgICB0aGlzLm5vdEZvdW5kID0gZmFsc2U7XG4gICAgaWYgKHNlYXJjaCA9PT0gJycgfHwgc2VhcmNoID09PSBudWxsKSB7XG4gICAgICB0aGlzLmNvdW50cmllcyA9IHRoaXMuYWxsQ291bnRyaWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWFyY2ggPSBzZWFyY2gudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgIHRoaXMuY291bnRyaWVzID0gdGhpcy5hbGxDb3VudHJpZXMuZmlsdGVyKCByID0+IHtcbiAgICAgICAgcmV0dXJuIChyLm5hbWUgJiYgci5uYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2gpICE9PSAtMSk7XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLmNvdW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5ub3RGb3VuZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaXRlbVRhcHBlZChjKSB7XG4gICAgdGhpcy5tb2RhbEN0cmwuZGlzbWlzcyhjKTtcbiAgfVxuXG4gIGNsb3NlTW9kYWwoKSB7XG4gICAgdGhpcy5tb2RhbEN0cmwuZGlzbWlzcyhudWxsKTtcbiAgfVxuXG59XG4iLCI8aW9uLWhlYWRlcj5cbiAgPGlvbi10b29sYmFyPlxuICAgIDxpb24tdGl0bGUgY2xhc3M9XCJpb24tdGV4dC1jZW50ZXJcIj5cbiAgICAgIHt7dGl0bGV9fVxuICAgIDwvaW9uLXRpdGxlPlxuXG4gICAgPGlvbi1idXR0b25zIFtzbG90XT1cImNsb3NlQnV0dG9uU2xvdFwiPlxuICAgICAgPGlvbi1idXR0b24gaW9uLWJ1dHRvbiAoY2xpY2spPVwiY2xvc2VNb2RhbCgpXCI+e3tjbG9zZUJ1dHRvblRleHR9fTwvaW9uLWJ1dHRvbj5cbiAgICA8L2lvbi1idXR0b25zPlxuXG4gIDwvaW9uLXRvb2xiYXI+XG4gIDxpb24tc2VhcmNoYmFyICNzZWFyY2hCYXIgKm5nSWY9XCJjYW5TZWFyY2hcIiBwbGFjZWhvbGRlcj1cInt7c2VhcmNoUGxhY2Vob2xkZXJ9fVwiIFtkZWJvdW5jZV09XCI0MDBcIlxuICAgICAgICAgICAgICAgICAoa2V5dXAuZW50ZXIpPVwiJGV2ZW50LnRhcmdldC5ibHVyKClcIiAoaW9uQ2hhbmdlKT1cInNlYXJjaCgkZXZlbnQpXCI+PC9pb24tc2VhcmNoYmFyPlxuPC9pb24taGVhZGVyPlxuXG48aW9uLWNvbnRlbnQ+XG4gIDxpb24tbGlzdD5cbiAgICA8aW9uLXJhZGlvLWdyb3VwIFt2YWx1ZV09XCJjb3VudHJ5Lmlzb0NvZGVcIj5cbiAgICAgIDxpb24taXRlbSBzdHlsZT1cIndoaXRlLXNwYWNlOm5vcm1hbFwiICpuZ0Zvcj1cImxldCBjIG9mIGNvdW50cmllc1wiPlxuICAgICAgICA8aW9uLXJhZGlvIFt2YWx1ZV09XCJjLmlzb0NvZGVcIiBzbG90PVwic3RhcnRcIiBjb2xvcj1cInByaW1hcnlcIiAoY2xpY2spPVwiaXRlbVRhcHBlZChjKVwiPlxuICAgICAgICAgIHt7Yy5uYW1lfX0gPHNwYW4gKm5nSWY9XCJkaWFsQ29kZVwiPnt7ZGlhbENvZGV9fXt7Yy5kaXNwbGF5RGlhbENvZGV9fTwvc3Bhbj5cbiAgICAgICAgPC9pb24tcmFkaW8+XG4gICAgICAgIDxzcGFuIHNsb3Q9XCJlbmRcIiBjbGFzcz1cImZpIGZpLXt7Yy5mbGFnQ2xhc3N9fVwiPjwvc3Bhbj5cbiAgICAgIDwvaW9uLWl0ZW0+XG4gICAgPC9pb24tcmFkaW8tZ3JvdXA+XG4gICAgPGlvbi1pdGVtIGxpbmVzPVwibm9uZVwiICpuZ0lmPVwibm90Rm91bmRcIj5cbiAgICAgIDxpb24tdGV4dD57e3NlYXJjaEZhaWxUZXh0fX08L2lvbi10ZXh0PlxuICAgIDwvaW9uLWl0ZW0+XG4gIDwvaW9uLWxpc3Q+XG48L2lvbi1jb250ZW50PlxuIl19